generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAYMENT_RECEIVED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  INSTALLMENT
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  role          Role      @default(CUSTOMER)
  emailVerified DateTime?
  image         String?
  
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  reviews       Review[]
  addresses     Address[]
  wishlist      WishlistItem[]
  blogPosts     BlogPost[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  id          String   @id @default(cuid())
  userId      String
  title       String
  fullName    String
  phone       String
  city        String
  district    String
  neighborhood String?
  addressLine String   @db.Text
  postalCode  String?
  isDefault   Boolean  @default(false)
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Order[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id          String    @id @default(cuid())
  slug        String    @unique
  name        String
  description String?   @db.Text
  image       String?
  parentId    String?
  order       Int       @default(0)
  
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  seo         SEO?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String         @id @default(cuid())
  slug            String         @unique
  name            String
  description     String         @db.Text
  shortDescription String?       @db.Text
  price           Decimal        @db.Decimal(10, 2)
  comparePrice    Decimal?       @db.Decimal(10, 2)
  stock           Int            @default(0)
  lowStockThreshold Int          @default(5)
  sku             String?        @unique
  barcode         String?
  dimensions      Json?
  weight          Decimal?       @db.Decimal(8, 2)
  weightUnit      String?        @default("kg")
  featured        Boolean        @default(false)
  isActive        Boolean        @default(true)
  
  categoryId      String
  category        Category       @relation(fields: [categoryId], references: [id])
  images          ProductImage[]
  woodFinishes    ProductWoodFinish[]
  reviews         Review[]
  orderItems      OrderItem[]
  wishlistItems   WishlistItem[]
  seo             SEO?
  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  @@index([categoryId])
  @@index([slug])
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  alt       String?
  order     Int      @default(0)
  
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([productId])
}

model WoodFinish {
  id          String              @id @default(cuid())
  name        String              @unique
  slug        String              @unique
  hexColor    String
  textureUrl  String?
  description String?
  
  products    ProductWoodFinish[]
  
  createdAt   DateTime            @default(now())
}

model ProductWoodFinish {
  id            String      @id @default(cuid())
  productId     String
  woodFinishId  String
  priceModifier Decimal?    @db.Decimal(10, 2)
  
  product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  woodFinish    WoodFinish  @relation(fields: [woodFinishId], references: [id])
  
  @@unique([productId, woodFinishId])
}

model Order {
  id            String        @id @default(cuid())
  orderNumber   String        @unique
  status        OrderStatus   @default(PENDING)
  
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  
  addressId     String
  address       Address       @relation(fields: [addressId], references: [id])
  
  subtotal      Decimal       @db.Decimal(10, 2)
  shippingCost  Decimal       @db.Decimal(10, 2) @default(0)
  tax           Decimal       @db.Decimal(10, 2) @default(0)
  discount      Decimal       @db.Decimal(10, 2) @default(0)
  total         Decimal       @db.Decimal(10, 2)
  
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(PENDING)
  paymentId     String?
  
  items         OrderItem[]
  
  trackingNumber String?
  shippedAt     DateTime?
  deliveredAt   DateTime?
  
  customerNote  String?       @db.Text
  adminNote     String?       @db.Text
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@index([userId])
  @@index([orderNumber])
}

model OrderItem {
  id              String   @id @default(cuid())
  orderId         String
  productId       String
  
  productName     String
  productImage    String?
  woodFinishName  String?
  
  quantity        Int
  unitPrice       Decimal  @db.Decimal(10, 2)
  totalPrice      Decimal  @db.Decimal(10, 2)
  
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product         Product  @relation(fields: [productId], references: [id])
  
  @@index([orderId])
}

model Review {
  id          String   @id @default(cuid())
  productId   String
  userId      String
  rating      Int
  title       String?
  comment     String   @db.Text
  isApproved  Boolean  @default(false)
  
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([productId, userId])
  @@index([productId])
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@unique([userId, productId])
  @@index([userId])
}

model BlogPost {
  id          String    @id @default(cuid())
  slug        String    @unique
  title       String
  excerpt     String?   @db.Text
  content     String    @db.Text
  coverImage  String?
  authorId    String
  published   Boolean   @default(false)
  publishedAt DateTime?
  
  author      User      @relation(fields: [authorId], references: [id])
  seo         SEO?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([slug])
}

model SEO {
  id              String     @id @default(cuid())
  metaTitle       String
  metaDescription String     @db.Text
  keywords        String?    @db.Text
  ogTitle         String?
  ogDescription   String?    @db.Text
  ogImage         String?
  canonicalUrl    String?
  
  productId       String?    @unique
  product         Product?   @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  categoryId      String?    @unique
  category        Category?  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  blogPostId      String?    @unique
  blogPost        BlogPost?  @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model SiteSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String   @db.Text
  type        String   @default("text")
  group       String   @default("general")
  description String?
  
  updatedAt   DateTime @updatedAt
}

model NewsletterSubscriber {
  id          String   @id @default(cuid())
  email       String   @unique
  isActive    Boolean  @default(true)
  source      String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}